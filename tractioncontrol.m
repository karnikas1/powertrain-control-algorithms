% Traction Control Simulation Using Slip Ratio Feedback
% Models 1D vehicle launch from rest using a PID slip controller
clear; clc;

% Vehicle & Tire Parameters
mass = 300;              % Vehicle mass [kg]
g = 9.81;                
Fz = mass * g / 4;       % Normal load on one tire [N], assuming 4 evenly loaded wheels
R_wheel = 0.25;          % Wheel radius [m]
I_wheel = 1.2;           % Moment of inertia for one driven wheel [kg*m^2]

% Initial Conditions
v_vehicle = 0.1;         % Initial vehicle speed [m/s], small non-zero to avoid division by zero
v_dot = 0;               % Vehicle acceleration [m/s^2]

% Tire Model (Pacejka Magic Formula Coefficients)
% These are empirical parameters to simulate tire force as a function of slip
B = 10; C = 1.9; D = 1.0; E = 0.97;

% Simulation Settings
dt = 0.001;              % Time step [s]
t_end = 2;               % Total simulation time [s]
time = 0:dt:t_end;       % Time vector

% Control Target
slip_target = 0.07;      % Desired slip ratio (~7%) for maximum traction

% PID Controller Gains
Kp = 1000;               % Proportional gain
Ki = 200;                % Integral gain (helps eliminate steady-state error)
Kd = 0;                  % Derivative gain (not used here, but useful for damping)
slip_integral = 0;       
slip_prev = 0;           % For computing slip derivative

% Logging Arrays
slip_array   = zeros(size(time));   % Slip ratio at each time step
v_array      = zeros(size(time));   % Vehicle speed [m/s]
omega_array  = zeros(size(time));   % Wheel angular speed [rad/s]
torque_array = zeros(size(time));   % Applied torque command [Nm]

omega = 0;  % Initial wheel angular speed [rad/s]

% Main Simulation Loop
for i = 1:length(time)

    % Calculate Slip Ratio
    v_wheel = omega * R_wheel;  % Wheel surface speed [m/s]
    slip = (v_wheel - v_vehicle) / max(v_vehicle, 0.1);  
    % Prevent division by zero; small denominator helps near-zero startup

    % Tire Force Calculation
    % Longitudinal force generated by tire based on current slip ratio
    Fx = Fz * D * sin(C * atan(B * slip - E * (B * slip - atan(B * slip))));
    % This follows the Pacejka Magic Formula for tire modeling

    % PID Controller: Adjust Torque Based on Slip Error 
    slip_error = slip_target - slip;
    slip_integral = slip_integral + slip_error * dt;
    slip_derivative = (slip_error - slip_prev) / dt;

    T_cmd = Kp * slip_error + Ki * slip_integral + Kd * slip_derivative;
    T_cmd = min(max(T_cmd, 0), 500);  % Clamp torque between 0 and max motor limit

    slip_prev = slip_error;  % Save for next derivative calculation

    % Wheel Dynamics
    % T_net = Motor torque - braking torque from tire
    % alpha = angular acceleration = net torque / I
    alpha = (T_cmd - Fx * R_wheel) / I_wheel;
    omega = omega + alpha * dt;  % Update wheel speed via Euler integration

    % Vehicle Dynamics 
    % Longitudinal acceleration = total force / mass
    v_dot = Fx / mass;
    v_vehicle = v_vehicle + v_dot * dt;  % Update vehicle speed

    % Log Values 
    slip_array(i) = slip;
    omega_array(i) = omega;
    v_array(i) = v_vehicle;
    torque_array(i) = T_cmd;
end

% Plot
figure;

% 1. Slip Ratio Over Time
subplot(4,1,1);
plot(time, slip_array, 'b');
title('1. Slip Ratio Over Time');
ylabel('Slip');
grid on;
%  Shows how close the system stays to the target slip ratio (e.g., 0.07).
%   Too high = wheelspin; too low = underutilized traction.

% 2. Vehicle Speed Over Time
subplot(4,1,2);
plot(time, v_array, 'g');
title('2. Vehicle Speed');
ylabel('v [m/s]');
grid on;
% Monitors how fast the vehicle accelerates.
%   Faster ramp-up = better use of traction.

% 3. Wheel Surface Speed Over Time
subplot(4,1,3);
plot(time, omega_array * R_wheel, 'k');
title('3. Wheel Surface Speed');
ylabel('v_{wheel} [m/s]');
grid on;
% Should stay slightly above vehicle speed when slip is positive.
%   If much higher, it's excessive wheelspin.

% 4. Applied Motor Torque Over Time
subplot(4,1,4);
plot(time, torque_array, 'r');
title('4. Applied Torque Command');
ylabel('Torque [Nm]');
xlabel('Time [s]');
grid on;
% This is what your motor would be commanded to do.
%   Controlled in real-time based on slip feedback.
